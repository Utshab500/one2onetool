jobs:
- job: kubernetes_deploy
  dependsOn: prepare_cluster
  displayName: Deploy
  variables:
    k8sNamespace: $[ dependencies.prepare_cluster.outputs['setNameSpace.NameSpace'] ]  

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download deploy-config'
    inputs:
      artifactName: 'deploy-config'
      downloadPath: '$(System.ArtifactsDirectory)'

  - bash: |
      #!/bin/bash
      IMAGE_PULL_SECRET=$( yq .spec.template.spec.imagePullSecrets[0].name $(System.ArtifactsDirectory)/deploy-config/k8s-deployment.yaml )
      echo "ImagePullSecret=$IMAGE_PULL_SECRET"
      echo "##vso[task.setvariable variable=ImagePullSecret]$IMAGE_PULL_SECRET"
    displayName: 'Extract Secret Name'

  - task: KubernetesManifest@0
    displayName: Create imagePullSecret
    inputs:
      action: createSecret
      secretName: $(ImagePullSecret)
      namespace: $(k8sNamespace)
      dockerRegistryEndpoint: ${{ parameters.dockerServiceConnection }}
      kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}

  - task: Kubernetes@1
    displayName: 'apply all'
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: ${{ parameters.kubernetesServiceConnection }}
      command: apply
      arguments: -f $(System.ArtifactsDirectory)/deploy-config/* --record
      outputFormat: yaml

  - task: Kubernetes@1
    displayName: 'wait-for-deploy'
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: ${{ parameters.kubernetesServiceConnection }}
      command: rollout
      arguments: 'status -f $(System.ArtifactsDirectory)/deploy-config/k8s-deployment.yaml'
      outputFormat: yaml
    timeoutInMinutes: 5